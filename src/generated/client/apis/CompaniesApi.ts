/* tslint:disable */
/* eslint-disable */
/**
 * Lipsanen Project Management API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Company,
    CompanyFromJSON,
    CompanyToJSON,
} from '../models';

export interface CreateCompanyRequest {
    company: Company;
}

export interface DeleteCompanyRequest {
    companyId: string;
}

export interface FindCompanyRequest {
    companyId: string;
}

export interface ListCompaniesRequest {
    first?: number;
    max?: number;
}

/**
 * 
 */
export class CompaniesApi extends runtime.BaseAPI {

    /**
     * Create a new company
     * Create a new company
     */
    async createCompanyRaw(requestParameters: CreateCompanyRequest): Promise<runtime.ApiResponse<Company>> {
        if (requestParameters.company === null || requestParameters.company === undefined) {
            throw new runtime.RequiredError('company','Required parameter requestParameters.company was null or undefined when calling createCompany.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/companies`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CompanyToJSON(requestParameters.company),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CompanyFromJSON(jsonValue));
    }

    /**
     * Create a new company
     * Create a new company
     */
    async createCompany(requestParameters: CreateCompanyRequest): Promise<Company> {
        const response = await this.createCompanyRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create a new company
     * Create a new company
     */
    async createCompanyWithHeaders(requestParameters: CreateCompanyRequest): Promise<[ Company, Headers ]> {
        const response = await this.createCompanyRaw(requestParameters);
        const value = await response.value(); 
        return [ value, response.raw.headers ];
    }

    /**
     * Delete a company
     * Delete a company
     */
    async deleteCompanyRaw(requestParameters: DeleteCompanyRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.companyId === null || requestParameters.companyId === undefined) {
            throw new runtime.RequiredError('companyId','Required parameter requestParameters.companyId was null or undefined when calling deleteCompany.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/companies/{companyId}`.replace(`{${"companyId"}}`, encodeURIComponent(String(requestParameters.companyId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a company
     * Delete a company
     */
    async deleteCompany(requestParameters: DeleteCompanyRequest): Promise<void> {
        await this.deleteCompanyRaw(requestParameters);
    }

    /**
     * Delete a company
     * Delete a company
     */
    async deleteCompanyWithHeaders(requestParameters: DeleteCompanyRequest): Promise<Headers> {
        const response = await this.deleteCompanyRaw(requestParameters);
        return response.raw.headers;
    }

    /**
     * Get a company
     * Get a company
     */
    async findCompanyRaw(requestParameters: FindCompanyRequest): Promise<runtime.ApiResponse<Company>> {
        if (requestParameters.companyId === null || requestParameters.companyId === undefined) {
            throw new runtime.RequiredError('companyId','Required parameter requestParameters.companyId was null or undefined when calling findCompany.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/companies/{companyId}`.replace(`{${"companyId"}}`, encodeURIComponent(String(requestParameters.companyId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CompanyFromJSON(jsonValue));
    }

    /**
     * Get a company
     * Get a company
     */
    async findCompany(requestParameters: FindCompanyRequest): Promise<Company> {
        const response = await this.findCompanyRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get a company
     * Get a company
     */
    async findCompanyWithHeaders(requestParameters: FindCompanyRequest): Promise<[ Company, Headers ]> {
        const response = await this.findCompanyRaw(requestParameters);
        const value = await response.value(); 
        return [ value, response.raw.headers ];
    }

    /**
     * Get all companies
     * Get all companies
     */
    async listCompaniesRaw(requestParameters: ListCompaniesRequest): Promise<runtime.ApiResponse<Array<Company>>> {
        const queryParameters: any = {};

        if (requestParameters.first !== undefined) {
            queryParameters['first'] = requestParameters.first;
        }

        if (requestParameters.max !== undefined) {
            queryParameters['max'] = requestParameters.max;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/companies`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CompanyFromJSON));
    }

    /**
     * Get all companies
     * Get all companies
     */
    async listCompanies(requestParameters: ListCompaniesRequest = {}): Promise<Array<Company>> {
        const response = await this.listCompaniesRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get all companies
     * Get all companies
     */
    async listCompaniesWithHeaders(requestParameters: ListCompaniesRequest): Promise<[ Array<Company>, Headers ]> {
        const response = await this.listCompaniesRaw(requestParameters);
        const value = await response.value(); 
        return [ value, response.raw.headers ];
    }

}
