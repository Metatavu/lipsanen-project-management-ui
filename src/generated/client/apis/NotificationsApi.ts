/* tslint:disable */
/* eslint-disable */
/**
 * Lipsanen Project Management API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';

export interface DeleteNotificationRequest {
    notificationId: string;
}

/**
 * 
 */
export class NotificationsApi extends runtime.BaseAPI {

    /**
     * Delete a notification, only for testing purposes.
     * Delete a notification
     */
    async deleteNotificationRaw(requestParameters: DeleteNotificationRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.notificationId === null || requestParameters.notificationId === undefined) {
            throw new runtime.RequiredError('notificationId','Required parameter requestParameters.notificationId was null or undefined when calling deleteNotification.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/notifications/{notificationId}`.replace(`{${"notificationId"}}`, encodeURIComponent(String(requestParameters.notificationId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a notification, only for testing purposes.
     * Delete a notification
     */
    async deleteNotification(requestParameters: DeleteNotificationRequest): Promise<void> {
        await this.deleteNotificationRaw(requestParameters);
    }

    /**
     * Delete a notification, only for testing purposes.
     * Delete a notification
     */
    async deleteNotificationWithHeaders(requestParameters: DeleteNotificationRequest): Promise<Headers> {
        const response = await this.deleteNotificationRaw(requestParameters);
        return response.raw.headers;
    }

}
