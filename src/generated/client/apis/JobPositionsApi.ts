/* tslint:disable */
/* eslint-disable */
/**
 * Lipsanen Project Management API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    JobPosition,
    JobPositionFromJSON,
    JobPositionToJSON,
} from '../models';

export interface CreateJobPositionRequest {
    jobPosition: JobPosition;
}

export interface DeleteJobPositionRequest {
    positionId: string;
}

export interface FindJobPositionRequest {
    positionId: string;
}

export interface ListJobPositionsRequest {
    first?: number;
    max?: number;
}

export interface UpdateJobPositionRequest {
    jobPosition: JobPosition;
    positionId: string;
}

/**
 * 
 */
export class JobPositionsApi extends runtime.BaseAPI {

    /**
     * Create a new position
     * Create a new position
     */
    async createJobPositionRaw(requestParameters: CreateJobPositionRequest): Promise<runtime.ApiResponse<JobPosition>> {
        if (requestParameters.jobPosition === null || requestParameters.jobPosition === undefined) {
            throw new runtime.RequiredError('jobPosition','Required parameter requestParameters.jobPosition was null or undefined when calling createJobPosition.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/jobPositions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: JobPositionToJSON(requestParameters.jobPosition),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => JobPositionFromJSON(jsonValue));
    }

    /**
     * Create a new position
     * Create a new position
     */
    async createJobPosition(requestParameters: CreateJobPositionRequest): Promise<JobPosition> {
        const response = await this.createJobPositionRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create a new position
     * Create a new position
     */
    async createJobPositionWithHeaders(requestParameters: CreateJobPositionRequest): Promise<[ JobPosition, Headers ]> {
        const response = await this.createJobPositionRaw(requestParameters);
        const value = await response.value(); 
        return [ value, response.raw.headers ];
    }

    /**
     * Delete a position
     * Delete a position
     */
    async deleteJobPositionRaw(requestParameters: DeleteJobPositionRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.positionId === null || requestParameters.positionId === undefined) {
            throw new runtime.RequiredError('positionId','Required parameter requestParameters.positionId was null or undefined when calling deleteJobPosition.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/jobPositions/{positionId}`.replace(`{${"positionId"}}`, encodeURIComponent(String(requestParameters.positionId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a position
     * Delete a position
     */
    async deleteJobPosition(requestParameters: DeleteJobPositionRequest): Promise<void> {
        await this.deleteJobPositionRaw(requestParameters);
    }

    /**
     * Delete a position
     * Delete a position
     */
    async deleteJobPositionWithHeaders(requestParameters: DeleteJobPositionRequest): Promise<Headers> {
        const response = await this.deleteJobPositionRaw(requestParameters);
        return response.raw.headers;
    }

    /**
     * Get a position
     * Get a position
     */
    async findJobPositionRaw(requestParameters: FindJobPositionRequest): Promise<runtime.ApiResponse<JobPosition>> {
        if (requestParameters.positionId === null || requestParameters.positionId === undefined) {
            throw new runtime.RequiredError('positionId','Required parameter requestParameters.positionId was null or undefined when calling findJobPosition.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/jobPositions/{positionId}`.replace(`{${"positionId"}}`, encodeURIComponent(String(requestParameters.positionId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => JobPositionFromJSON(jsonValue));
    }

    /**
     * Get a position
     * Get a position
     */
    async findJobPosition(requestParameters: FindJobPositionRequest): Promise<JobPosition> {
        const response = await this.findJobPositionRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get a position
     * Get a position
     */
    async findJobPositionWithHeaders(requestParameters: FindJobPositionRequest): Promise<[ JobPosition, Headers ]> {
        const response = await this.findJobPositionRaw(requestParameters);
        const value = await response.value(); 
        return [ value, response.raw.headers ];
    }

    /**
     * Get all jobPositions, sorted alphabetically
     * Get all jobPositions
     */
    async listJobPositionsRaw(requestParameters: ListJobPositionsRequest): Promise<runtime.ApiResponse<Array<JobPosition>>> {
        const queryParameters: any = {};

        if (requestParameters.first !== undefined) {
            queryParameters['first'] = requestParameters.first;
        }

        if (requestParameters.max !== undefined) {
            queryParameters['max'] = requestParameters.max;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/jobPositions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(JobPositionFromJSON));
    }

    /**
     * Get all jobPositions, sorted alphabetically
     * Get all jobPositions
     */
    async listJobPositions(requestParameters: ListJobPositionsRequest = {}): Promise<Array<JobPosition>> {
        const response = await this.listJobPositionsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get all jobPositions, sorted alphabetically
     * Get all jobPositions
     */
    async listJobPositionsWithHeaders(requestParameters: ListJobPositionsRequest): Promise<[ Array<JobPosition>, Headers ]> {
        const response = await this.listJobPositionsRaw(requestParameters);
        const value = await response.value(); 
        return [ value, response.raw.headers ];
    }

    /**
     * Update a position
     * Update a position
     */
    async updateJobPositionRaw(requestParameters: UpdateJobPositionRequest): Promise<runtime.ApiResponse<JobPosition>> {
        if (requestParameters.jobPosition === null || requestParameters.jobPosition === undefined) {
            throw new runtime.RequiredError('jobPosition','Required parameter requestParameters.jobPosition was null or undefined when calling updateJobPosition.');
        }

        if (requestParameters.positionId === null || requestParameters.positionId === undefined) {
            throw new runtime.RequiredError('positionId','Required parameter requestParameters.positionId was null or undefined when calling updateJobPosition.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/jobPositions/{positionId}`.replace(`{${"positionId"}}`, encodeURIComponent(String(requestParameters.positionId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: JobPositionToJSON(requestParameters.jobPosition),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => JobPositionFromJSON(jsonValue));
    }

    /**
     * Update a position
     * Update a position
     */
    async updateJobPosition(requestParameters: UpdateJobPositionRequest): Promise<JobPosition> {
        const response = await this.updateJobPositionRaw(requestParameters);
        return await response.value();
    }

    /**
     * Update a position
     * Update a position
     */
    async updateJobPositionWithHeaders(requestParameters: UpdateJobPositionRequest): Promise<[ JobPosition, Headers ]> {
        const response = await this.updateJobPositionRaw(requestParameters);
        const value = await response.value(); 
        return [ value, response.raw.headers ];
    }

}
