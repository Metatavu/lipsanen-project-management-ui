/* tslint:disable */
/* eslint-disable */
/**
 * Lipsanen Project Management API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Task,
    TaskFromJSON,
    TaskToJSON,
} from '../models';

export interface CreateTaskRequest {
    task: Task;
    projectId: string;
    milestoneId: string;
}

export interface DeleteTaskRequest {
    projectId: string;
    milestoneId: string;
    taskId: string;
}

export interface FindTaskRequest {
    projectId: string;
    milestoneId: string;
    taskId: string;
}

export interface ListTasksRequest {
    projectId: string;
    milestoneId: string;
    first?: number;
    max?: number;
}

export interface UpdateTaskRequest {
    task: Task;
    projectId: string;
    milestoneId: string;
    taskId: string;
}

/**
 * 
 */
export class TasksApi extends runtime.BaseAPI {

    /**
     * Create a new milestone task
     * Create a new milestone task
     */
    async createTaskRaw(requestParameters: CreateTaskRequest): Promise<runtime.ApiResponse<Task>> {
        if (requestParameters.task === null || requestParameters.task === undefined) {
            throw new runtime.RequiredError('task','Required parameter requestParameters.task was null or undefined when calling createTask.');
        }

        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling createTask.');
        }

        if (requestParameters.milestoneId === null || requestParameters.milestoneId === undefined) {
            throw new runtime.RequiredError('milestoneId','Required parameter requestParameters.milestoneId was null or undefined when calling createTask.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/projects/{projectId}/milestones/{milestoneId}/tasks`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"milestoneId"}}`, encodeURIComponent(String(requestParameters.milestoneId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TaskToJSON(requestParameters.task),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TaskFromJSON(jsonValue));
    }

    /**
     * Create a new milestone task
     * Create a new milestone task
     */
    async createTask(requestParameters: CreateTaskRequest): Promise<Task> {
        const response = await this.createTaskRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create a new milestone task
     * Create a new milestone task
     */
    async createTaskWithHeaders(requestParameters: CreateTaskRequest): Promise<[ Task, Headers ]> {
        const response = await this.createTaskRaw(requestParameters);
        const value = await response.value(); 
        return [ value, response.raw.headers ];
    }

    /**
     * Delete a milestone task
     * Delete a milestone task
     */
    async deleteTaskRaw(requestParameters: DeleteTaskRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling deleteTask.');
        }

        if (requestParameters.milestoneId === null || requestParameters.milestoneId === undefined) {
            throw new runtime.RequiredError('milestoneId','Required parameter requestParameters.milestoneId was null or undefined when calling deleteTask.');
        }

        if (requestParameters.taskId === null || requestParameters.taskId === undefined) {
            throw new runtime.RequiredError('taskId','Required parameter requestParameters.taskId was null or undefined when calling deleteTask.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/projects/{projectId}/milestones/{milestoneId}/tasks/{taskId}`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"milestoneId"}}`, encodeURIComponent(String(requestParameters.milestoneId))).replace(`{${"taskId"}}`, encodeURIComponent(String(requestParameters.taskId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a milestone task
     * Delete a milestone task
     */
    async deleteTask(requestParameters: DeleteTaskRequest): Promise<void> {
        await this.deleteTaskRaw(requestParameters);
    }

    /**
     * Delete a milestone task
     * Delete a milestone task
     */
    async deleteTaskWithHeaders(requestParameters: DeleteTaskRequest): Promise<Headers> {
        const response = await this.deleteTaskRaw(requestParameters);
        return response.raw.headers;
    }

    /**
     * Get a milestone task
     * Get a milestone task
     */
    async findTaskRaw(requestParameters: FindTaskRequest): Promise<runtime.ApiResponse<Task>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling findTask.');
        }

        if (requestParameters.milestoneId === null || requestParameters.milestoneId === undefined) {
            throw new runtime.RequiredError('milestoneId','Required parameter requestParameters.milestoneId was null or undefined when calling findTask.');
        }

        if (requestParameters.taskId === null || requestParameters.taskId === undefined) {
            throw new runtime.RequiredError('taskId','Required parameter requestParameters.taskId was null or undefined when calling findTask.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/projects/{projectId}/milestones/{milestoneId}/tasks/{taskId}`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"milestoneId"}}`, encodeURIComponent(String(requestParameters.milestoneId))).replace(`{${"taskId"}}`, encodeURIComponent(String(requestParameters.taskId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TaskFromJSON(jsonValue));
    }

    /**
     * Get a milestone task
     * Get a milestone task
     */
    async findTask(requestParameters: FindTaskRequest): Promise<Task> {
        const response = await this.findTaskRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get a milestone task
     * Get a milestone task
     */
    async findTaskWithHeaders(requestParameters: FindTaskRequest): Promise<[ Task, Headers ]> {
        const response = await this.findTaskRaw(requestParameters);
        const value = await response.value(); 
        return [ value, response.raw.headers ];
    }

    /**
     * Get all milestone tasks
     * Get all milestone tasks
     */
    async listTasksRaw(requestParameters: ListTasksRequest): Promise<runtime.ApiResponse<Array<Task>>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling listTasks.');
        }

        if (requestParameters.milestoneId === null || requestParameters.milestoneId === undefined) {
            throw new runtime.RequiredError('milestoneId','Required parameter requestParameters.milestoneId was null or undefined when calling listTasks.');
        }

        const queryParameters: any = {};

        if (requestParameters.first !== undefined) {
            queryParameters['first'] = requestParameters.first;
        }

        if (requestParameters.max !== undefined) {
            queryParameters['max'] = requestParameters.max;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/projects/{projectId}/milestones/{milestoneId}/tasks`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"milestoneId"}}`, encodeURIComponent(String(requestParameters.milestoneId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TaskFromJSON));
    }

    /**
     * Get all milestone tasks
     * Get all milestone tasks
     */
    async listTasks(requestParameters: ListTasksRequest): Promise<Array<Task>> {
        const response = await this.listTasksRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get all milestone tasks
     * Get all milestone tasks
     */
    async listTasksWithHeaders(requestParameters: ListTasksRequest): Promise<[ Array<Task>, Headers ]> {
        const response = await this.listTasksRaw(requestParameters);
        const value = await response.value(); 
        return [ value, response.raw.headers ];
    }

    /**
     * Update a milestone task
     * Update a milestone task
     */
    async updateTaskRaw(requestParameters: UpdateTaskRequest): Promise<runtime.ApiResponse<Task>> {
        if (requestParameters.task === null || requestParameters.task === undefined) {
            throw new runtime.RequiredError('task','Required parameter requestParameters.task was null or undefined when calling updateTask.');
        }

        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling updateTask.');
        }

        if (requestParameters.milestoneId === null || requestParameters.milestoneId === undefined) {
            throw new runtime.RequiredError('milestoneId','Required parameter requestParameters.milestoneId was null or undefined when calling updateTask.');
        }

        if (requestParameters.taskId === null || requestParameters.taskId === undefined) {
            throw new runtime.RequiredError('taskId','Required parameter requestParameters.taskId was null or undefined when calling updateTask.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/projects/{projectId}/milestones/{milestoneId}/tasks/{taskId}`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"milestoneId"}}`, encodeURIComponent(String(requestParameters.milestoneId))).replace(`{${"taskId"}}`, encodeURIComponent(String(requestParameters.taskId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TaskToJSON(requestParameters.task),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TaskFromJSON(jsonValue));
    }

    /**
     * Update a milestone task
     * Update a milestone task
     */
    async updateTask(requestParameters: UpdateTaskRequest): Promise<Task> {
        const response = await this.updateTaskRaw(requestParameters);
        return await response.value();
    }

    /**
     * Update a milestone task
     * Update a milestone task
     */
    async updateTaskWithHeaders(requestParameters: UpdateTaskRequest): Promise<[ Task, Headers ]> {
        const response = await this.updateTaskRaw(requestParameters);
        const value = await response.value(); 
        return [ value, response.raw.headers ];
    }

}
