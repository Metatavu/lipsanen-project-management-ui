/* tslint:disable */
/* eslint-disable */
/**
 * Lipsanen Project Management API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ChangeProposal,
    ChangeProposalFromJSON,
    ChangeProposalToJSON,
    Task,
    TaskFromJSON,
    TaskToJSON,
} from '../models';

export interface CreateChangeProposalRequest {
    changeProposal: ChangeProposal;
    projectId: string;
}

export interface DeleteChangeProposalRequest {
    projectId: string;
    changeProposalId: string;
}

export interface FindChangeProposalRequest {
    projectId: string;
    changeProposalId: string;
}

export interface ListChangeProposalTasksPreviewRequest {
    projectId: string;
    changeProposalId: string;
}

export interface ListChangeProposalsRequest {
    projectId?: string;
    milestoneId?: string;
    taskId?: string;
    first?: number;
    max?: number;
}

export interface UpdateChangeProposalRequest {
    changeProposal: ChangeProposal;
    projectId: string;
    changeProposalId: string;
}

/**
 * 
 */
export class ChangeProposalsApi extends runtime.BaseAPI {

    /**
     * Create a new change proposal within a milestone
     * Create a new change proposal within a milestone
     */
    async createChangeProposalRaw(requestParameters: CreateChangeProposalRequest): Promise<runtime.ApiResponse<ChangeProposal>> {
        if (requestParameters.changeProposal === null || requestParameters.changeProposal === undefined) {
            throw new runtime.RequiredError('changeProposal','Required parameter requestParameters.changeProposal was null or undefined when calling createChangeProposal.');
        }

        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling createChangeProposal.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/projects/{projectId}/changeProposals`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeProposalToJSON(requestParameters.changeProposal),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ChangeProposalFromJSON(jsonValue));
    }

    /**
     * Create a new change proposal within a milestone
     * Create a new change proposal within a milestone
     */
    async createChangeProposal(requestParameters: CreateChangeProposalRequest): Promise<ChangeProposal> {
        const response = await this.createChangeProposalRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create a new change proposal within a milestone
     * Create a new change proposal within a milestone
     */
    async createChangeProposalWithHeaders(requestParameters: CreateChangeProposalRequest): Promise<[ ChangeProposal, Headers ]> {
        const response = await this.createChangeProposalRaw(requestParameters);
        const value = await response.value(); 
        return [ value, response.raw.headers ];
    }

    /**
     * Deletes a specific change proposal within a milestone
     * Delete a specific change proposal within a milestone
     */
    async deleteChangeProposalRaw(requestParameters: DeleteChangeProposalRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling deleteChangeProposal.');
        }

        if (requestParameters.changeProposalId === null || requestParameters.changeProposalId === undefined) {
            throw new runtime.RequiredError('changeProposalId','Required parameter requestParameters.changeProposalId was null or undefined when calling deleteChangeProposal.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/projects/{projectId}/changeProposals/{changeProposalId}`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"changeProposalId"}}`, encodeURIComponent(String(requestParameters.changeProposalId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a specific change proposal within a milestone
     * Delete a specific change proposal within a milestone
     */
    async deleteChangeProposal(requestParameters: DeleteChangeProposalRequest): Promise<void> {
        await this.deleteChangeProposalRaw(requestParameters);
    }

    /**
     * Deletes a specific change proposal within a milestone
     * Delete a specific change proposal within a milestone
     */
    async deleteChangeProposalWithHeaders(requestParameters: DeleteChangeProposalRequest): Promise<Headers> {
        const response = await this.deleteChangeProposalRaw(requestParameters);
        return response.raw.headers;
    }

    /**
     * Find a specific change proposal within a milestone
     * Find a specific change proposal within a milestone
     */
    async findChangeProposalRaw(requestParameters: FindChangeProposalRequest): Promise<runtime.ApiResponse<ChangeProposal>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling findChangeProposal.');
        }

        if (requestParameters.changeProposalId === null || requestParameters.changeProposalId === undefined) {
            throw new runtime.RequiredError('changeProposalId','Required parameter requestParameters.changeProposalId was null or undefined when calling findChangeProposal.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/projects/{projectId}/changeProposals/{changeProposalId}`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"changeProposalId"}}`, encodeURIComponent(String(requestParameters.changeProposalId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ChangeProposalFromJSON(jsonValue));
    }

    /**
     * Find a specific change proposal within a milestone
     * Find a specific change proposal within a milestone
     */
    async findChangeProposal(requestParameters: FindChangeProposalRequest): Promise<ChangeProposal> {
        const response = await this.findChangeProposalRaw(requestParameters);
        return await response.value();
    }

    /**
     * Find a specific change proposal within a milestone
     * Find a specific change proposal within a milestone
     */
    async findChangeProposalWithHeaders(requestParameters: FindChangeProposalRequest): Promise<[ ChangeProposal, Headers ]> {
        const response = await this.findChangeProposalRaw(requestParameters);
        const value = await response.value(); 
        return [ value, response.raw.headers ];
    }

    /**
     * List of updated tasks that are affected by the change proposal
     * List of updated tasks that are affected by the change proposal
     */
    async listChangeProposalTasksPreviewRaw(requestParameters: ListChangeProposalTasksPreviewRequest): Promise<runtime.ApiResponse<Array<Task>>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling listChangeProposalTasksPreview.');
        }

        if (requestParameters.changeProposalId === null || requestParameters.changeProposalId === undefined) {
            throw new runtime.RequiredError('changeProposalId','Required parameter requestParameters.changeProposalId was null or undefined when calling listChangeProposalTasksPreview.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/projects/{projectId}/changeProposals/{changeProposalId}/tasks`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"changeProposalId"}}`, encodeURIComponent(String(requestParameters.changeProposalId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TaskFromJSON));
    }

    /**
     * List of updated tasks that are affected by the change proposal
     * List of updated tasks that are affected by the change proposal
     */
    async listChangeProposalTasksPreview(requestParameters: ListChangeProposalTasksPreviewRequest): Promise<Array<Task>> {
        const response = await this.listChangeProposalTasksPreviewRaw(requestParameters);
        return await response.value();
    }

    /**
     * List of updated tasks that are affected by the change proposal
     * List of updated tasks that are affected by the change proposal
     */
    async listChangeProposalTasksPreviewWithHeaders(requestParameters: ListChangeProposalTasksPreviewRequest): Promise<[ Array<Task>, Headers ]> {
        const response = await this.listChangeProposalTasksPreviewRaw(requestParameters);
        const value = await response.value(); 
        return [ value, response.raw.headers ];
    }

    /**
     * Lists change proposals within a milestone. Proposals are sorted from earliest to latest created.
     * List change proposals within a milestone
     */
    async listChangeProposalsRaw(requestParameters: ListChangeProposalsRequest): Promise<runtime.ApiResponse<Array<ChangeProposal>>> {
        const queryParameters: any = {};

        if (requestParameters.projectId !== undefined) {
            queryParameters['projectId'] = requestParameters.projectId;
        }

        if (requestParameters.milestoneId !== undefined) {
            queryParameters['milestoneId'] = requestParameters.milestoneId;
        }

        if (requestParameters.taskId !== undefined) {
            queryParameters['taskId'] = requestParameters.taskId;
        }

        if (requestParameters.first !== undefined) {
            queryParameters['first'] = requestParameters.first;
        }

        if (requestParameters.max !== undefined) {
            queryParameters['max'] = requestParameters.max;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/changeProposals`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ChangeProposalFromJSON));
    }

    /**
     * Lists change proposals within a milestone. Proposals are sorted from earliest to latest created.
     * List change proposals within a milestone
     */
    async listChangeProposals(requestParameters: ListChangeProposalsRequest = {}): Promise<Array<ChangeProposal>> {
        const response = await this.listChangeProposalsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Lists change proposals within a milestone. Proposals are sorted from earliest to latest created.
     * List change proposals within a milestone
     */
    async listChangeProposalsWithHeaders(requestParameters: ListChangeProposalsRequest): Promise<[ Array<ChangeProposal>, Headers ]> {
        const response = await this.listChangeProposalsRaw(requestParameters);
        const value = await response.value(); 
        return [ value, response.raw.headers ];
    }

    /**
     * Update a specific change proposal within a milestone
     * Update a specific change proposal within a milestone
     */
    async updateChangeProposalRaw(requestParameters: UpdateChangeProposalRequest): Promise<runtime.ApiResponse<ChangeProposal>> {
        if (requestParameters.changeProposal === null || requestParameters.changeProposal === undefined) {
            throw new runtime.RequiredError('changeProposal','Required parameter requestParameters.changeProposal was null or undefined when calling updateChangeProposal.');
        }

        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling updateChangeProposal.');
        }

        if (requestParameters.changeProposalId === null || requestParameters.changeProposalId === undefined) {
            throw new runtime.RequiredError('changeProposalId','Required parameter requestParameters.changeProposalId was null or undefined when calling updateChangeProposal.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/projects/{projectId}/changeProposals/{changeProposalId}`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"changeProposalId"}}`, encodeURIComponent(String(requestParameters.changeProposalId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeProposalToJSON(requestParameters.changeProposal),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ChangeProposalFromJSON(jsonValue));
    }

    /**
     * Update a specific change proposal within a milestone
     * Update a specific change proposal within a milestone
     */
    async updateChangeProposal(requestParameters: UpdateChangeProposalRequest): Promise<ChangeProposal> {
        const response = await this.updateChangeProposalRaw(requestParameters);
        return await response.value();
    }

    /**
     * Update a specific change proposal within a milestone
     * Update a specific change proposal within a milestone
     */
    async updateChangeProposalWithHeaders(requestParameters: UpdateChangeProposalRequest): Promise<[ ChangeProposal, Headers ]> {
        const response = await this.updateChangeProposalRaw(requestParameters);
        const value = await response.value(); 
        return [ value, response.raw.headers ];
    }

}
