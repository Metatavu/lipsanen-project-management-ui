/* tslint:disable */
/* eslint-disable */
/**
 * Lipsanen Project Management API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    NotificationEvent,
    NotificationEventFromJSON,
    NotificationEventToJSON,
} from '../models';

export interface DeleteNotificationEventRequest {
    notificationEventId: string;
}

export interface FindNotificationEventRequest {
    notificationEventId: string;
}

export interface ListNotificationEventsRequest {
    userId: string;
    projectId?: string;
    taskId?: string;
    first?: number;
    max?: number;
    readStatus?: boolean;
}

export interface UpdateNotificationEventRequest {
    notificationEvent: NotificationEvent;
    notificationEventId: string;
}

/**
 * 
 */
export class NotificationEventsApi extends runtime.BaseAPI {

    /**
     * Delete a notification event
     * Delete a notification event
     */
    async deleteNotificationEventRaw(requestParameters: DeleteNotificationEventRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.notificationEventId === null || requestParameters.notificationEventId === undefined) {
            throw new runtime.RequiredError('notificationEventId','Required parameter requestParameters.notificationEventId was null or undefined when calling deleteNotificationEvent.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/notificationEvents/{notificationEventId}`.replace(`{${"notificationEventId"}}`, encodeURIComponent(String(requestParameters.notificationEventId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a notification event
     * Delete a notification event
     */
    async deleteNotificationEvent(requestParameters: DeleteNotificationEventRequest): Promise<void> {
        await this.deleteNotificationEventRaw(requestParameters);
    }

    /**
     * Delete a notification event
     * Delete a notification event
     */
    async deleteNotificationEventWithHeaders(requestParameters: DeleteNotificationEventRequest): Promise<Headers> {
        const response = await this.deleteNotificationEventRaw(requestParameters);
        return response.raw.headers;
    }

    /**
     * Get a notification event
     * Get a notification event
     */
    async findNotificationEventRaw(requestParameters: FindNotificationEventRequest): Promise<runtime.ApiResponse<NotificationEvent>> {
        if (requestParameters.notificationEventId === null || requestParameters.notificationEventId === undefined) {
            throw new runtime.RequiredError('notificationEventId','Required parameter requestParameters.notificationEventId was null or undefined when calling findNotificationEvent.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/notificationEvents/{notificationEventId}`.replace(`{${"notificationEventId"}}`, encodeURIComponent(String(requestParameters.notificationEventId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => NotificationEventFromJSON(jsonValue));
    }

    /**
     * Get a notification event
     * Get a notification event
     */
    async findNotificationEvent(requestParameters: FindNotificationEventRequest): Promise<NotificationEvent> {
        const response = await this.findNotificationEventRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get a notification event
     * Get a notification event
     */
    async findNotificationEventWithHeaders(requestParameters: FindNotificationEventRequest): Promise<[ NotificationEvent, Headers ]> {
        const response = await this.findNotificationEventRaw(requestParameters);
        const value = await response.value(); 
        return [ value, response.raw.headers ];
    }

    /**
     * Get all notification events for a user
     * Get all notification events
     */
    async listNotificationEventsRaw(requestParameters: ListNotificationEventsRequest): Promise<runtime.ApiResponse<Array<NotificationEvent>>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling listNotificationEvents.');
        }

        const queryParameters: any = {};

        if (requestParameters.userId !== undefined) {
            queryParameters['userId'] = requestParameters.userId;
        }

        if (requestParameters.projectId !== undefined) {
            queryParameters['projectId'] = requestParameters.projectId;
        }

        if (requestParameters.taskId !== undefined) {
            queryParameters['taskId'] = requestParameters.taskId;
        }

        if (requestParameters.first !== undefined) {
            queryParameters['first'] = requestParameters.first;
        }

        if (requestParameters.max !== undefined) {
            queryParameters['max'] = requestParameters.max;
        }

        if (requestParameters.readStatus !== undefined) {
            queryParameters['readStatus'] = requestParameters.readStatus;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/notificationEvents`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(NotificationEventFromJSON));
    }

    /**
     * Get all notification events for a user
     * Get all notification events
     */
    async listNotificationEvents(requestParameters: ListNotificationEventsRequest): Promise<Array<NotificationEvent>> {
        const response = await this.listNotificationEventsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get all notification events for a user
     * Get all notification events
     */
    async listNotificationEventsWithHeaders(requestParameters: ListNotificationEventsRequest): Promise<[ Array<NotificationEvent>, Headers ]> {
        const response = await this.listNotificationEventsRaw(requestParameters);
        const value = await response.value(); 
        return [ value, response.raw.headers ];
    }

    /**
     * Update a notification event
     * Update a notification event
     */
    async updateNotificationEventRaw(requestParameters: UpdateNotificationEventRequest): Promise<runtime.ApiResponse<NotificationEvent>> {
        if (requestParameters.notificationEvent === null || requestParameters.notificationEvent === undefined) {
            throw new runtime.RequiredError('notificationEvent','Required parameter requestParameters.notificationEvent was null or undefined when calling updateNotificationEvent.');
        }

        if (requestParameters.notificationEventId === null || requestParameters.notificationEventId === undefined) {
            throw new runtime.RequiredError('notificationEventId','Required parameter requestParameters.notificationEventId was null or undefined when calling updateNotificationEvent.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/notificationEvents/{notificationEventId}`.replace(`{${"notificationEventId"}}`, encodeURIComponent(String(requestParameters.notificationEventId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: NotificationEventToJSON(requestParameters.notificationEvent),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => NotificationEventFromJSON(jsonValue));
    }

    /**
     * Update a notification event
     * Update a notification event
     */
    async updateNotificationEvent(requestParameters: UpdateNotificationEventRequest): Promise<NotificationEvent> {
        const response = await this.updateNotificationEventRaw(requestParameters);
        return await response.value();
    }

    /**
     * Update a notification event
     * Update a notification event
     */
    async updateNotificationEventWithHeaders(requestParameters: UpdateNotificationEventRequest): Promise<[ NotificationEvent, Headers ]> {
        const response = await this.updateNotificationEventRaw(requestParameters);
        const value = await response.value(); 
        return [ value, response.raw.headers ];
    }

}
