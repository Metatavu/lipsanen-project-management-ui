/* tslint:disable */
/* eslint-disable */
/**
 * Lipsanen Project Management API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    TaskComment,
    TaskCommentFromJSON,
    TaskCommentToJSON,
} from '../models';

export interface CreateTaskCommentRequest {
    taskComment: TaskComment;
    taskId: string;
}

export interface DeleteTaskCommentRequest {
    taskId: string;
    commentId: string;
}

export interface FindTaskCommentRequest {
    taskId: string;
    commentId: string;
}

export interface ListTaskCommentsRequest {
    taskId: string;
    first?: number;
    max?: number;
}

export interface UpdateTaskCommentRequest {
    taskComment: TaskComment;
    taskId: string;
    commentId: string;
}

/**
 * 
 */
export class TaskCommentsApi extends runtime.BaseAPI {

    /**
     * Create a new comment within a task
     * Create a new comment within a task
     */
    async createTaskCommentRaw(requestParameters: CreateTaskCommentRequest): Promise<runtime.ApiResponse<TaskComment>> {
        if (requestParameters.taskComment === null || requestParameters.taskComment === undefined) {
            throw new runtime.RequiredError('taskComment','Required parameter requestParameters.taskComment was null or undefined when calling createTaskComment.');
        }

        if (requestParameters.taskId === null || requestParameters.taskId === undefined) {
            throw new runtime.RequiredError('taskId','Required parameter requestParameters.taskId was null or undefined when calling createTaskComment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/tasks/{taskId}/comments`.replace(`{${"taskId"}}`, encodeURIComponent(String(requestParameters.taskId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TaskCommentToJSON(requestParameters.taskComment),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TaskCommentFromJSON(jsonValue));
    }

    /**
     * Create a new comment within a task
     * Create a new comment within a task
     */
    async createTaskComment(requestParameters: CreateTaskCommentRequest): Promise<TaskComment> {
        const response = await this.createTaskCommentRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create a new comment within a task
     * Create a new comment within a task
     */
    async createTaskCommentWithHeaders(requestParameters: CreateTaskCommentRequest): Promise<[ TaskComment, Headers ]> {
        const response = await this.createTaskCommentRaw(requestParameters);
        const value = await response.value(); 
        return [ value, response.raw.headers ];
    }

    /**
     * Deletes a specific comment within a task
     * Delete a specific comment within a task
     */
    async deleteTaskCommentRaw(requestParameters: DeleteTaskCommentRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.taskId === null || requestParameters.taskId === undefined) {
            throw new runtime.RequiredError('taskId','Required parameter requestParameters.taskId was null or undefined when calling deleteTaskComment.');
        }

        if (requestParameters.commentId === null || requestParameters.commentId === undefined) {
            throw new runtime.RequiredError('commentId','Required parameter requestParameters.commentId was null or undefined when calling deleteTaskComment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/tasks/{taskId}/comments/{commentId}`.replace(`{${"taskId"}}`, encodeURIComponent(String(requestParameters.taskId))).replace(`{${"commentId"}}`, encodeURIComponent(String(requestParameters.commentId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a specific comment within a task
     * Delete a specific comment within a task
     */
    async deleteTaskComment(requestParameters: DeleteTaskCommentRequest): Promise<void> {
        await this.deleteTaskCommentRaw(requestParameters);
    }

    /**
     * Deletes a specific comment within a task
     * Delete a specific comment within a task
     */
    async deleteTaskCommentWithHeaders(requestParameters: DeleteTaskCommentRequest): Promise<Headers> {
        const response = await this.deleteTaskCommentRaw(requestParameters);
        return response.raw.headers;
    }

    /**
     * Find a specific comment within a task
     * Find a specific comment within a task
     */
    async findTaskCommentRaw(requestParameters: FindTaskCommentRequest): Promise<runtime.ApiResponse<TaskComment>> {
        if (requestParameters.taskId === null || requestParameters.taskId === undefined) {
            throw new runtime.RequiredError('taskId','Required parameter requestParameters.taskId was null or undefined when calling findTaskComment.');
        }

        if (requestParameters.commentId === null || requestParameters.commentId === undefined) {
            throw new runtime.RequiredError('commentId','Required parameter requestParameters.commentId was null or undefined when calling findTaskComment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/tasks/{taskId}/comments/{commentId}`.replace(`{${"taskId"}}`, encodeURIComponent(String(requestParameters.taskId))).replace(`{${"commentId"}}`, encodeURIComponent(String(requestParameters.commentId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TaskCommentFromJSON(jsonValue));
    }

    /**
     * Find a specific comment within a task
     * Find a specific comment within a task
     */
    async findTaskComment(requestParameters: FindTaskCommentRequest): Promise<TaskComment> {
        const response = await this.findTaskCommentRaw(requestParameters);
        return await response.value();
    }

    /**
     * Find a specific comment within a task
     * Find a specific comment within a task
     */
    async findTaskCommentWithHeaders(requestParameters: FindTaskCommentRequest): Promise<[ TaskComment, Headers ]> {
        const response = await this.findTaskCommentRaw(requestParameters);
        const value = await response.value(); 
        return [ value, response.raw.headers ];
    }

    /**
     * Lists comments within a task. Comments are sorted from earliest to latest created.
     * List comments within a task
     */
    async listTaskCommentsRaw(requestParameters: ListTaskCommentsRequest): Promise<runtime.ApiResponse<Array<TaskComment>>> {
        if (requestParameters.taskId === null || requestParameters.taskId === undefined) {
            throw new runtime.RequiredError('taskId','Required parameter requestParameters.taskId was null or undefined when calling listTaskComments.');
        }

        const queryParameters: any = {};

        if (requestParameters.first !== undefined) {
            queryParameters['first'] = requestParameters.first;
        }

        if (requestParameters.max !== undefined) {
            queryParameters['max'] = requestParameters.max;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/tasks/{taskId}/comments`.replace(`{${"taskId"}}`, encodeURIComponent(String(requestParameters.taskId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TaskCommentFromJSON));
    }

    /**
     * Lists comments within a task. Comments are sorted from earliest to latest created.
     * List comments within a task
     */
    async listTaskComments(requestParameters: ListTaskCommentsRequest): Promise<Array<TaskComment>> {
        const response = await this.listTaskCommentsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Lists comments within a task. Comments are sorted from earliest to latest created.
     * List comments within a task
     */
    async listTaskCommentsWithHeaders(requestParameters: ListTaskCommentsRequest): Promise<[ Array<TaskComment>, Headers ]> {
        const response = await this.listTaskCommentsRaw(requestParameters);
        const value = await response.value(); 
        return [ value, response.raw.headers ];
    }

    /**
     * Update a specific comment within a task
     * Update a specific comment within a task
     */
    async updateTaskCommentRaw(requestParameters: UpdateTaskCommentRequest): Promise<runtime.ApiResponse<TaskComment>> {
        if (requestParameters.taskComment === null || requestParameters.taskComment === undefined) {
            throw new runtime.RequiredError('taskComment','Required parameter requestParameters.taskComment was null or undefined when calling updateTaskComment.');
        }

        if (requestParameters.taskId === null || requestParameters.taskId === undefined) {
            throw new runtime.RequiredError('taskId','Required parameter requestParameters.taskId was null or undefined when calling updateTaskComment.');
        }

        if (requestParameters.commentId === null || requestParameters.commentId === undefined) {
            throw new runtime.RequiredError('commentId','Required parameter requestParameters.commentId was null or undefined when calling updateTaskComment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/tasks/{taskId}/comments/{commentId}`.replace(`{${"taskId"}}`, encodeURIComponent(String(requestParameters.taskId))).replace(`{${"commentId"}}`, encodeURIComponent(String(requestParameters.commentId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TaskCommentToJSON(requestParameters.taskComment),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TaskCommentFromJSON(jsonValue));
    }

    /**
     * Update a specific comment within a task
     * Update a specific comment within a task
     */
    async updateTaskComment(requestParameters: UpdateTaskCommentRequest): Promise<TaskComment> {
        const response = await this.updateTaskCommentRaw(requestParameters);
        return await response.value();
    }

    /**
     * Update a specific comment within a task
     * Update a specific comment within a task
     */
    async updateTaskCommentWithHeaders(requestParameters: UpdateTaskCommentRequest): Promise<[ TaskComment, Headers ]> {
        const response = await this.updateTaskCommentRaw(requestParameters);
        const value = await response.value(); 
        return [ value, response.raw.headers ];
    }

}
