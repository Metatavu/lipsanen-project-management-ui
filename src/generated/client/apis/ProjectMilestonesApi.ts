/* tslint:disable */
/* eslint-disable */
/**
 * Lipsanen Project Management API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Milestone,
    MilestoneFromJSON,
    MilestoneToJSON,
} from '../models';

export interface CreateProjectMilestoneRequest {
    milestone: Milestone;
    projectId: string;
}

export interface DeleteProjectMilestoneRequest {
    projectId: string;
    milestoneId: string;
}

export interface FindProjectMilestoneRequest {
    projectId: string;
    milestoneId: string;
}

export interface ListProjectMilestonesRequest {
    projectId: string;
}

export interface UpdateProjectMilestoneRequest {
    milestone: Milestone;
    projectId: string;
    milestoneId: string;
}

/**
 * 
 */
export class ProjectMilestonesApi extends runtime.BaseAPI {

    /**
     * Create a new project milestone
     * Create a new project milestone
     */
    async createProjectMilestoneRaw(requestParameters: CreateProjectMilestoneRequest): Promise<runtime.ApiResponse<Milestone>> {
        if (requestParameters.milestone === null || requestParameters.milestone === undefined) {
            throw new runtime.RequiredError('milestone','Required parameter requestParameters.milestone was null or undefined when calling createProjectMilestone.');
        }

        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling createProjectMilestone.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/projects/{projectId}/milestones`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MilestoneToJSON(requestParameters.milestone),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MilestoneFromJSON(jsonValue));
    }

    /**
     * Create a new project milestone
     * Create a new project milestone
     */
    async createProjectMilestone(requestParameters: CreateProjectMilestoneRequest): Promise<Milestone> {
        const response = await this.createProjectMilestoneRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create a new project milestone
     * Create a new project milestone
     */
    async createProjectMilestoneWithHeaders(requestParameters: CreateProjectMilestoneRequest): Promise<[ Milestone, Headers ]> {
        const response = await this.createProjectMilestoneRaw(requestParameters);
        const value = await response.value(); 
        return [ value, response.raw.headers ];
    }

    /**
     * Delete a project milestone, cannot be deleted unless its tasks and dependencies are deleted first.
     * Delete a project milestone
     */
    async deleteProjectMilestoneRaw(requestParameters: DeleteProjectMilestoneRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling deleteProjectMilestone.');
        }

        if (requestParameters.milestoneId === null || requestParameters.milestoneId === undefined) {
            throw new runtime.RequiredError('milestoneId','Required parameter requestParameters.milestoneId was null or undefined when calling deleteProjectMilestone.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/projects/{projectId}/milestones/{milestoneId}`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"milestoneId"}}`, encodeURIComponent(String(requestParameters.milestoneId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a project milestone, cannot be deleted unless its tasks and dependencies are deleted first.
     * Delete a project milestone
     */
    async deleteProjectMilestone(requestParameters: DeleteProjectMilestoneRequest): Promise<void> {
        await this.deleteProjectMilestoneRaw(requestParameters);
    }

    /**
     * Delete a project milestone, cannot be deleted unless its tasks and dependencies are deleted first.
     * Delete a project milestone
     */
    async deleteProjectMilestoneWithHeaders(requestParameters: DeleteProjectMilestoneRequest): Promise<Headers> {
        const response = await this.deleteProjectMilestoneRaw(requestParameters);
        return response.raw.headers;
    }

    /**
     * Get a project milestone
     * Get a project milestone
     */
    async findProjectMilestoneRaw(requestParameters: FindProjectMilestoneRequest): Promise<runtime.ApiResponse<Milestone>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling findProjectMilestone.');
        }

        if (requestParameters.milestoneId === null || requestParameters.milestoneId === undefined) {
            throw new runtime.RequiredError('milestoneId','Required parameter requestParameters.milestoneId was null or undefined when calling findProjectMilestone.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/projects/{projectId}/milestones/{milestoneId}`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"milestoneId"}}`, encodeURIComponent(String(requestParameters.milestoneId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MilestoneFromJSON(jsonValue));
    }

    /**
     * Get a project milestone
     * Get a project milestone
     */
    async findProjectMilestone(requestParameters: FindProjectMilestoneRequest): Promise<Milestone> {
        const response = await this.findProjectMilestoneRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get a project milestone
     * Get a project milestone
     */
    async findProjectMilestoneWithHeaders(requestParameters: FindProjectMilestoneRequest): Promise<[ Milestone, Headers ]> {
        const response = await this.findProjectMilestoneRaw(requestParameters);
        const value = await response.value(); 
        return [ value, response.raw.headers ];
    }

    /**
     * Get all project milestones
     * Get all project milestones
     */
    async listProjectMilestonesRaw(requestParameters: ListProjectMilestonesRequest): Promise<runtime.ApiResponse<Array<Milestone>>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling listProjectMilestones.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/projects/{projectId}/milestones`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MilestoneFromJSON));
    }

    /**
     * Get all project milestones
     * Get all project milestones
     */
    async listProjectMilestones(requestParameters: ListProjectMilestonesRequest): Promise<Array<Milestone>> {
        const response = await this.listProjectMilestonesRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get all project milestones
     * Get all project milestones
     */
    async listProjectMilestonesWithHeaders(requestParameters: ListProjectMilestonesRequest): Promise<[ Array<Milestone>, Headers ]> {
        const response = await this.listProjectMilestonesRaw(requestParameters);
        const value = await response.value(); 
        return [ value, response.raw.headers ];
    }

    /**
     * Update a project milestone
     * Update a project milestone
     */
    async updateProjectMilestoneRaw(requestParameters: UpdateProjectMilestoneRequest): Promise<runtime.ApiResponse<Milestone>> {
        if (requestParameters.milestone === null || requestParameters.milestone === undefined) {
            throw new runtime.RequiredError('milestone','Required parameter requestParameters.milestone was null or undefined when calling updateProjectMilestone.');
        }

        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling updateProjectMilestone.');
        }

        if (requestParameters.milestoneId === null || requestParameters.milestoneId === undefined) {
            throw new runtime.RequiredError('milestoneId','Required parameter requestParameters.milestoneId was null or undefined when calling updateProjectMilestone.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/projects/{projectId}/milestones/{milestoneId}`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"milestoneId"}}`, encodeURIComponent(String(requestParameters.milestoneId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: MilestoneToJSON(requestParameters.milestone),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MilestoneFromJSON(jsonValue));
    }

    /**
     * Update a project milestone
     * Update a project milestone
     */
    async updateProjectMilestone(requestParameters: UpdateProjectMilestoneRequest): Promise<Milestone> {
        const response = await this.updateProjectMilestoneRaw(requestParameters);
        return await response.value();
    }

    /**
     * Update a project milestone
     * Update a project milestone
     */
    async updateProjectMilestoneWithHeaders(requestParameters: UpdateProjectMilestoneRequest): Promise<[ Milestone, Headers ]> {
        const response = await this.updateProjectMilestoneRaw(requestParameters);
        const value = await response.value(); 
        return [ value, response.raw.headers ];
    }

}
