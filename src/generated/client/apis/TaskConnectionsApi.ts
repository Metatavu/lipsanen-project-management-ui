/* tslint:disable */
/* eslint-disable */
/**
 * Lipsanen Project Management API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    TaskConnection,
    TaskConnectionFromJSON,
    TaskConnectionToJSON,
    TaskConnectionRole,
    TaskConnectionRoleFromJSON,
    TaskConnectionRoleToJSON,
} from '../models';

export interface CreateTaskConnectionRequest {
    taskConnection: TaskConnection;
    projectId: string;
}

export interface DeleteTaskConnectionRequest {
    projectId: string;
    connectionId: string;
}

export interface FindTaskConnectionRequest {
    projectId: string;
    connectionId: string;
}

export interface ListTaskConnectionsRequest {
    projectId: string;
    connectionRole?: TaskConnectionRole;
}

export interface UpdateTaskConnectionRequest {
    taskConnection: TaskConnection;
    projectId: string;
    connectionId: string;
}

/**
 * 
 */
export class TaskConnectionsApi extends runtime.BaseAPI {

    /**
     * Create a new task connection
     * Create a new task connection
     */
    async createTaskConnectionRaw(requestParameters: CreateTaskConnectionRequest): Promise<runtime.ApiResponse<TaskConnection>> {
        if (requestParameters.taskConnection === null || requestParameters.taskConnection === undefined) {
            throw new runtime.RequiredError('taskConnection','Required parameter requestParameters.taskConnection was null or undefined when calling createTaskConnection.');
        }

        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling createTaskConnection.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/projects/{projectId}/connections`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TaskConnectionToJSON(requestParameters.taskConnection),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TaskConnectionFromJSON(jsonValue));
    }

    /**
     * Create a new task connection
     * Create a new task connection
     */
    async createTaskConnection(requestParameters: CreateTaskConnectionRequest): Promise<TaskConnection> {
        const response = await this.createTaskConnectionRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create a new task connection
     * Create a new task connection
     */
    async createTaskConnectionWithHeaders(requestParameters: CreateTaskConnectionRequest): Promise<[ TaskConnection, Headers ]> {
        const response = await this.createTaskConnectionRaw(requestParameters);
        const value = await response.value(); 
        return [ value, response.raw.headers ];
    }

    /**
     * Delete a task connection
     * Delete a task connection
     */
    async deleteTaskConnectionRaw(requestParameters: DeleteTaskConnectionRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling deleteTaskConnection.');
        }

        if (requestParameters.connectionId === null || requestParameters.connectionId === undefined) {
            throw new runtime.RequiredError('connectionId','Required parameter requestParameters.connectionId was null or undefined when calling deleteTaskConnection.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/projects/{projectId}/connections/{connectionId}`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"connectionId"}}`, encodeURIComponent(String(requestParameters.connectionId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a task connection
     * Delete a task connection
     */
    async deleteTaskConnection(requestParameters: DeleteTaskConnectionRequest): Promise<void> {
        await this.deleteTaskConnectionRaw(requestParameters);
    }

    /**
     * Delete a task connection
     * Delete a task connection
     */
    async deleteTaskConnectionWithHeaders(requestParameters: DeleteTaskConnectionRequest): Promise<Headers> {
        const response = await this.deleteTaskConnectionRaw(requestParameters);
        return response.raw.headers;
    }

    /**
     * Get a task connection
     * Get a task connection
     */
    async findTaskConnectionRaw(requestParameters: FindTaskConnectionRequest): Promise<runtime.ApiResponse<TaskConnection>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling findTaskConnection.');
        }

        if (requestParameters.connectionId === null || requestParameters.connectionId === undefined) {
            throw new runtime.RequiredError('connectionId','Required parameter requestParameters.connectionId was null or undefined when calling findTaskConnection.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/projects/{projectId}/connections/{connectionId}`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"connectionId"}}`, encodeURIComponent(String(requestParameters.connectionId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TaskConnectionFromJSON(jsonValue));
    }

    /**
     * Get a task connection
     * Get a task connection
     */
    async findTaskConnection(requestParameters: FindTaskConnectionRequest): Promise<TaskConnection> {
        const response = await this.findTaskConnectionRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get a task connection
     * Get a task connection
     */
    async findTaskConnectionWithHeaders(requestParameters: FindTaskConnectionRequest): Promise<[ TaskConnection, Headers ]> {
        const response = await this.findTaskConnectionRaw(requestParameters);
        const value = await response.value(); 
        return [ value, response.raw.headers ];
    }

    /**
     * Get all task connections
     * Get all task connections
     */
    async listTaskConnectionsRaw(requestParameters: ListTaskConnectionsRequest): Promise<runtime.ApiResponse<Array<TaskConnection>>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling listTaskConnections.');
        }

        const queryParameters: any = {};

        if (requestParameters.connectionRole !== undefined) {
            queryParameters['connectionRole'] = requestParameters.connectionRole;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/projects/{projectId}/connections`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TaskConnectionFromJSON));
    }

    /**
     * Get all task connections
     * Get all task connections
     */
    async listTaskConnections(requestParameters: ListTaskConnectionsRequest): Promise<Array<TaskConnection>> {
        const response = await this.listTaskConnectionsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get all task connections
     * Get all task connections
     */
    async listTaskConnectionsWithHeaders(requestParameters: ListTaskConnectionsRequest): Promise<[ Array<TaskConnection>, Headers ]> {
        const response = await this.listTaskConnectionsRaw(requestParameters);
        const value = await response.value(); 
        return [ value, response.raw.headers ];
    }

    /**
     * Update a milestone task
     * Update a milestone task
     */
    async updateTaskConnectionRaw(requestParameters: UpdateTaskConnectionRequest): Promise<runtime.ApiResponse<TaskConnection>> {
        if (requestParameters.taskConnection === null || requestParameters.taskConnection === undefined) {
            throw new runtime.RequiredError('taskConnection','Required parameter requestParameters.taskConnection was null or undefined when calling updateTaskConnection.');
        }

        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling updateTaskConnection.');
        }

        if (requestParameters.connectionId === null || requestParameters.connectionId === undefined) {
            throw new runtime.RequiredError('connectionId','Required parameter requestParameters.connectionId was null or undefined when calling updateTaskConnection.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/projects/{projectId}/connections/{connectionId}`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"connectionId"}}`, encodeURIComponent(String(requestParameters.connectionId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TaskConnectionToJSON(requestParameters.taskConnection),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TaskConnectionFromJSON(jsonValue));
    }

    /**
     * Update a milestone task
     * Update a milestone task
     */
    async updateTaskConnection(requestParameters: UpdateTaskConnectionRequest): Promise<TaskConnection> {
        const response = await this.updateTaskConnectionRaw(requestParameters);
        return await response.value();
    }

    /**
     * Update a milestone task
     * Update a milestone task
     */
    async updateTaskConnectionWithHeaders(requestParameters: UpdateTaskConnectionRequest): Promise<[ TaskConnection, Headers ]> {
        const response = await this.updateTaskConnectionRaw(requestParameters);
        const value = await response.value(); 
        return [ value, response.raw.headers ];
    }

}
