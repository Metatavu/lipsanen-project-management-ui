/* tslint:disable */
/* eslint-disable */
/**
 * Lipsanen Project Management API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Metadata } from './Metadata';
import {
    MetadataFromJSON,
    MetadataFromJSONTyped,
    MetadataToJSON,
} from './Metadata';
import type { TaskStatus } from './TaskStatus';
import {
    TaskStatusFromJSON,
    TaskStatusFromJSONTyped,
    TaskStatusToJSON,
} from './TaskStatus';

/**
 * milestone
 * @export
 * @interface Task
 */
export interface Task {
    /**
     * 
     * @type {string}
     * @memberof Task
     */
    readonly id?: string;
    /**
     * 
     * @type {string}
     * @memberof Task
     */
    name: string;
    /**
     * Can be edited only within proposal OR in project planning stage by admin
     * @type {Date}
     * @memberof Task
     */
    startDate: Date;
    /**
     * Can be edited only within proposal OR in project planning stage by admin
     * @type {Date}
     * @memberof Task
     */
    endDate: Date;
    /**
     * 
     * @type {string}
     * @memberof Task
     */
    milestoneId: string;
    /**
     * 
     * @type {TaskStatus}
     * @memberof Task
     */
    status: TaskStatus;
    /**
     * 
     * @type {Metadata}
     * @memberof Task
     */
    metadata?: Metadata;
}

/**
 * Check if a given object implements the Task interface.
 */
export function instanceOfTask(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "startDate" in value;
    isInstance = isInstance && "endDate" in value;
    isInstance = isInstance && "milestoneId" in value;
    isInstance = isInstance && "status" in value;

    return isInstance;
}

export function TaskFromJSON(json: any): Task {
    return TaskFromJSONTyped(json, false);
}

export function TaskFromJSONTyped(json: any, ignoreDiscriminator: boolean): Task {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'name': json['name'],
        'startDate': (new Date(json['startDate'])),
        'endDate': (new Date(json['endDate'])),
        'milestoneId': json['milestoneId'],
        'status': TaskStatusFromJSON(json['status']),
        'metadata': !exists(json, 'metadata') ? undefined : MetadataFromJSON(json['metadata']),
    };
}

export function TaskToJSON(value?: Task | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'startDate': (value.startDate.toISOString().substring(0,10)),
        'endDate': (value.endDate.toISOString().substring(0,10)),
        'milestoneId': value.milestoneId,
        'status': TaskStatusToJSON(value.status),
        'metadata': MetadataToJSON(value.metadata),
    };
}

