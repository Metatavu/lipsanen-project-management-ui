/* tslint:disable */
/* eslint-disable */
/**
 * Lipsanen Project Management API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Metadata } from './Metadata';
import {
    MetadataFromJSON,
    MetadataFromJSONTyped,
    MetadataToJSON,
} from './Metadata';

/**
 * Theme object
 * @export
 * @interface ProjectTheme
 */
export interface ProjectTheme {
    /**
     * 
     * @type {string}
     * @memberof ProjectTheme
     */
    readonly id?: string;
    /**
     * Theme color code
     * @type {string}
     * @memberof ProjectTheme
     */
    themeColor: string;
    /**
     * 
     * @type {string}
     * @memberof ProjectTheme
     */
    logoUrl: string;
    /**
     * 
     * @type {Metadata}
     * @memberof ProjectTheme
     */
    metadata?: Metadata;
}

/**
 * Check if a given object implements the ProjectTheme interface.
 */
export function instanceOfProjectTheme(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "themeColor" in value;
    isInstance = isInstance && "logoUrl" in value;

    return isInstance;
}

export function ProjectThemeFromJSON(json: any): ProjectTheme {
    return ProjectThemeFromJSONTyped(json, false);
}

export function ProjectThemeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ProjectTheme {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'themeColor': json['themeColor'],
        'logoUrl': json['logoUrl'],
        'metadata': !exists(json, 'metadata') ? undefined : MetadataFromJSON(json['metadata']),
    };
}

export function ProjectThemeToJSON(value?: ProjectTheme | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'themeColor': value.themeColor,
        'logoUrl': value.logoUrl,
        'metadata': MetadataToJSON(value.metadata),
    };
}

