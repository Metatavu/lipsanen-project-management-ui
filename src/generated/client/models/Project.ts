/* tslint:disable */
/* eslint-disable */
/**
 * Lipsanen Project Management API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Metadata } from './Metadata';
import {
    MetadataFromJSON,
    MetadataFromJSONTyped,
    MetadataToJSON,
} from './Metadata';
import type { ProjectStatus } from './ProjectStatus';
import {
    ProjectStatusFromJSON,
    ProjectStatusFromJSONTyped,
    ProjectStatusToJSON,
} from './ProjectStatus';

/**
 * Project object
 * @export
 * @interface Project
 */
export interface Project {
    /**
     * 
     * @type {string}
     * @memberof Project
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof Project
     */
    name: string;
    /**
     * 
     * @type {number}
     * @memberof Project
     */
    tocomanId?: number;
    /**
     * 
     * @type {ProjectStatus}
     * @memberof Project
     */
    status: ProjectStatus;
    /**
     * Estimated start date of the project
     * @type {Date}
     * @memberof Project
     */
    estimatedStartDate?: Date;
    /**
     * Estimated end date of the project
     * @type {Date}
     * @memberof Project
     */
    estimatedEndDate?: Date;
    /**
     * 
     * @type {Metadata}
     * @memberof Project
     */
    metadata?: Metadata;
}

/**
 * Check if a given object implements the Project interface.
 */
export function instanceOfProject(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "status" in value;

    return isInstance;
}

export function ProjectFromJSON(json: any): Project {
    return ProjectFromJSONTyped(json, false);
}

export function ProjectFromJSONTyped(json: any, ignoreDiscriminator: boolean): Project {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'name': json['name'],
        'tocomanId': !exists(json, 'tocomanId') ? undefined : json['tocomanId'],
        'status': ProjectStatusFromJSON(json['status']),
        'estimatedStartDate': !exists(json, 'estimatedStartDate') ? undefined : (new Date(json['estimatedStartDate'])),
        'estimatedEndDate': !exists(json, 'estimatedEndDate') ? undefined : (new Date(json['estimatedEndDate'])),
        'metadata': !exists(json, 'metadata') ? undefined : MetadataFromJSON(json['metadata']),
    };
}

export function ProjectToJSON(value?: Project | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'name': value.name,
        'tocomanId': value.tocomanId,
        'status': ProjectStatusToJSON(value.status),
        'estimatedStartDate': value.estimatedStartDate === undefined ? undefined : (value.estimatedStartDate.toISOString().substring(0,10)),
        'estimatedEndDate': value.estimatedEndDate === undefined ? undefined : (value.estimatedEndDate.toISOString().substring(0,10)),
        'metadata': MetadataToJSON(value.metadata),
    };
}

