/* tslint:disable */
/* eslint-disable */
/**
 * Lipsanen Project Management API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Metadata } from './Metadata';
import {
    MetadataFromJSON,
    MetadataFromJSONTyped,
    MetadataToJSON,
} from './Metadata';
import type { Notification } from './Notification';
import {
    NotificationFromJSON,
    NotificationFromJSONTyped,
    NotificationToJSON,
} from './Notification';

/**
 * Received notification by a user
 * @export
 * @interface NotificationEvent
 */
export interface NotificationEvent {
    /**
     * 
     * @type {string}
     * @memberof NotificationEvent
     */
    readonly id?: string;
    /**
     * 
     * @type {Notification}
     * @memberof NotificationEvent
     */
    notification: Notification;
    /**
     * User ID that the notification was sent to
     * @type {string}
     * @memberof NotificationEvent
     */
    receiverId: string;
    /**
     * Whether the notification has been read
     * @type {boolean}
     * @memberof NotificationEvent
     */
    read: boolean;
    /**
     * 
     * @type {Metadata}
     * @memberof NotificationEvent
     */
    metadata?: Metadata;
}

/**
 * Check if a given object implements the NotificationEvent interface.
 */
export function instanceOfNotificationEvent(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "notification" in value;
    isInstance = isInstance && "receiverId" in value;
    isInstance = isInstance && "read" in value;

    return isInstance;
}

export function NotificationEventFromJSON(json: any): NotificationEvent {
    return NotificationEventFromJSONTyped(json, false);
}

export function NotificationEventFromJSONTyped(json: any, ignoreDiscriminator: boolean): NotificationEvent {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'notification': NotificationFromJSON(json['notification']),
        'receiverId': json['receiverId'],
        'read': json['read'],
        'metadata': !exists(json, 'metadata') ? undefined : MetadataFromJSON(json['metadata']),
    };
}

export function NotificationEventToJSON(value?: NotificationEvent | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'notification': NotificationToJSON(value.notification),
        'receiverId': value.receiverId,
        'read': value.read,
        'metadata': MetadataToJSON(value.metadata),
    };
}

