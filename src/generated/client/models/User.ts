/* tslint:disable */
/* eslint-disable */
/**
 * Lipsanen Project Management API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { UserRole } from './UserRole';
import {
    UserRoleFromJSON,
    UserRoleFromJSONTyped,
    UserRoleToJSON,
} from './UserRole';

/**
 * User object
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {string}
     * @memberof User
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    readonly keycloakId?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    firstName: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    lastName: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    companyId?: string;
    /**
     * 
     * @type {Date}
     * @memberof User
     */
    lastLoggedIn?: Date;
    /**
     * List of project ids that the user belongs to
     * @type {Array<string>}
     * @memberof User
     */
    projectIds?: Array<string>;
    /**
     * User roles, can be empty or filled if includeRoles pameter is used. Defines the access level of the user.
     * @type {Array<UserRole>}
     * @memberof User
     */
    readonly roles?: Array<UserRole>;
    /**
     * Job position that the user has
     * @type {string}
     * @memberof User
     */
    jobPositionId?: string;
}

/**
 * Check if a given object implements the User interface.
 */
export function instanceOfUser(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "firstName" in value;
    isInstance = isInstance && "lastName" in value;
    isInstance = isInstance && "email" in value;

    return isInstance;
}

export function UserFromJSON(json: any): User {
    return UserFromJSONTyped(json, false);
}

export function UserFromJSONTyped(json: any, ignoreDiscriminator: boolean): User {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'keycloakId': !exists(json, 'keycloakId') ? undefined : json['keycloakId'],
        'firstName': json['firstName'],
        'lastName': json['lastName'],
        'email': json['email'],
        'companyId': !exists(json, 'companyId') ? undefined : json['companyId'],
        'lastLoggedIn': !exists(json, 'lastLoggedIn') ? undefined : (new Date(json['lastLoggedIn'])),
        'projectIds': !exists(json, 'projectIds') ? undefined : json['projectIds'],
        'roles': !exists(json, 'roles') ? undefined : ((json['roles'] as Array<any>).map(UserRoleFromJSON)),
        'jobPositionId': !exists(json, 'jobPositionId') ? undefined : json['jobPositionId'],
    };
}

export function UserToJSON(value?: User | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'firstName': value.firstName,
        'lastName': value.lastName,
        'email': value.email,
        'companyId': value.companyId,
        'lastLoggedIn': value.lastLoggedIn === undefined ? undefined : (value.lastLoggedIn.toISOString()),
        'projectIds': value.projectIds,
        'jobPositionId': value.jobPositionId,
    };
}

