/* tslint:disable */
/* eslint-disable */
/**
 * Lipsanen Project Management API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ChangeProposalStatus } from './ChangeProposalStatus';
import {
    ChangeProposalStatusFromJSON,
    ChangeProposalStatusFromJSONTyped,
    ChangeProposalStatusToJSON,
} from './ChangeProposalStatus';
import type { Metadata } from './Metadata';
import {
    MetadataFromJSON,
    MetadataFromJSONTyped,
    MetadataToJSON,
} from './Metadata';

/**
 * Change proposal
 * @export
 * @interface ChangeProposal
 */
export interface ChangeProposal {
    /**
     * 
     * @type {string}
     * @memberof ChangeProposal
     */
    readonly id?: string;
    /**
     * 
     * @type {string}
     * @memberof ChangeProposal
     */
    readonly taskId: string;
    /**
     * Null if change is not needed and not null if the start date is proposed to change
     * @type {Date}
     * @memberof ChangeProposal
     */
    startDate?: Date;
    /**
     * Null if change is not needed and not null if the end date is proposed to change
     * @type {Date}
     * @memberof ChangeProposal
     */
    endDate?: Date;
    /**
     * The reason for the proposed change
     * @type {string}
     * @memberof ChangeProposal
     */
    reason: string;
    /**
     * Additional comments or details about the proposed change
     * @type {string}
     * @memberof ChangeProposal
     */
    comment?: string;
    /**
     * 
     * @type {ChangeProposalStatus}
     * @memberof ChangeProposal
     */
    status: ChangeProposalStatus;
    /**
     * 
     * @type {Metadata}
     * @memberof ChangeProposal
     */
    metadata?: Metadata;
}

/**
 * Check if a given object implements the ChangeProposal interface.
 */
export function instanceOfChangeProposal(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "taskId" in value;
    isInstance = isInstance && "reason" in value;
    isInstance = isInstance && "status" in value;

    return isInstance;
}

export function ChangeProposalFromJSON(json: any): ChangeProposal {
    return ChangeProposalFromJSONTyped(json, false);
}

export function ChangeProposalFromJSONTyped(json: any, ignoreDiscriminator: boolean): ChangeProposal {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'taskId': json['taskId'],
        'startDate': !exists(json, 'startDate') ? undefined : (new Date(json['startDate'])),
        'endDate': !exists(json, 'endDate') ? undefined : (new Date(json['endDate'])),
        'reason': json['reason'],
        'comment': !exists(json, 'comment') ? undefined : json['comment'],
        'status': ChangeProposalStatusFromJSON(json['status']),
        'metadata': !exists(json, 'metadata') ? undefined : MetadataFromJSON(json['metadata']),
    };
}

export function ChangeProposalToJSON(value?: ChangeProposal | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'startDate': value.startDate === undefined ? undefined : (value.startDate.toISOString().substring(0,10)),
        'endDate': value.endDate === undefined ? undefined : (value.endDate.toISOString().substring(0,10)),
        'reason': value.reason,
        'comment': value.comment,
        'status': ChangeProposalStatusToJSON(value.status),
        'metadata': MetadataToJSON(value.metadata),
    };
}

